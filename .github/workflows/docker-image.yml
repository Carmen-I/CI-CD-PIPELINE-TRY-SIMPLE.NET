name: Build and Push Solution to GHCR

on:
  push:
    branches:
      - main  # Runs when changes are pushed to the main branch
  pull_request:
    branches:
      - main  # Runs on pull requests to the main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      OWNER: ${{ github.repository_owner }} # Your GitHub username or organization

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0' # Specify your .NET version

      # 3. Restore, build, and publish the solution
      - name: Restore, Build, and Publish Solution
        run: |
          # Navigate to the solution directory
          cd Sols-WebAppMVCExercises

          # Restore dependencies for the solution
          dotnet restore Sols-WebAppMVCExercises.sln

          # Build the solution
          dotnet build Sols-WebAppMVCExercises.sln --configuration Release --no-restore

          # Publish the solution to an output directory
          dotnet publish Sols-WebAppMVCExercises.sln --configuration Release --output ./out

          # Debug output directory
          echo "Listing contents of the current directory:"
          ls -la
          echo "Listing contents of the ./out directory if it exists:"
          if [ -d "./out" ]; then
            ls -la ./out
          else
            echo "./out directory does not exist."
            exit 1
          fi

      # 4. Generate Dockerfile
      - name: Generate Dockerfile
        run: |
          cat > Dockerfile <<- EOF
          FROM mcr.microsoft.com/dotnet/aspnet:7.0 AS base
          WORKDIR /app
          COPY ./out ./
          EXPOSE 80
          ENTRYPOINT ["dotnet", "Sols-WebAppMVCExercises.dll"]
          EOF

      # 5. Log in to GHCR
      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      # 6. Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          LOWERCASE_OWNER=$(echo "${{ env.OWNER }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ${{ env.REGISTRY }}/${LOWERCASE_OWNER}/mysolution:latest .
          docker push ${{ env.REGISTRY }}/${LOWERCASE_OWNER}/mysolution:latest



